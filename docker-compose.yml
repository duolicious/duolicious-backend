services:
  postgres:
    build:
      context: .
      dockerfile: postgres.Dockerfile
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 1s
      retries: 60

  api:
    build:
      context: .
      dockerfile: api.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5000:5000"
    volumes:
      - .:/app:ro
    environment:
      DUO_ENV: dev
      DUO_EMAIL_KEY: ${DUO_EMAIL_KEY}
      DUO_EMAIL_URL: ${DUO_EMAIL_URL}
      DUO_DB_HOST: postgres
      DUO_DB_PORT: 5432
      DUO_DB_USER: postgres
      DUO_DB_PASS: password
      DUO_DB_NAME: duo_api
      DUO_CORS_ORIGINS: '*'
      DUO_R2_BUCKET_NAME: ${DUO_R2_BUCKET_NAME}
      DUO_R2_ACCT_ID: ${DUO_R2_ACCT_ID}
      DUO_R2_ACCESS_KEY_ID: ${DUO_R2_ACCESS_KEY_ID}
      DUO_R2_ACCESS_KEY_SECRET: ${DUO_R2_ACCESS_KEY_SECRET}

  chat:
    build:
      context: .
      dockerfile: chat.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5442:5442"
      - "5443:5443"
    volumes:
      - ./service/chat/__init__.py:/app/service/chat/__init__.py:ro
      - ./service/chat/container/mongooseim.toml:/mongooseim.template.toml:ro
    environment:
      DUO_API_HOST: http://api:5000
      DUO_DB_HOST: postgres
      DUO_DB_PORT: 5432
      DUO_DB_USER: postgres
      DUO_DB_PASS: password
      DUO_DB_NAME: duo_chat

networks:
  default:
    driver: bridge
