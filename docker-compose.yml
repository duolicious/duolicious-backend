services:
  status:
    build:
      context: .
      dockerfile: status.Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./service/status/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./service/status/index.html:/usr/share/nginx/html/index.html:ro

  postgres:
    build:
      context: .
      dockerfile: postgres.Dockerfile
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 1s
      retries: 60

  api:
    build:
      context: .
      dockerfile: api.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5000:5000"
    volumes:
      - .:/app:ro
    environment:
      DUO_ENV: dev

      DUO_SMTP_HOST: smtp
      DUO_SMTP_PORT: 1025
      DUO_SMTP_USER: unused-in-dev-env
      DUO_SMTP_PASS: unused-in-dev-env

      DUO_REPORT_EMAIL: duolicious@example.com

      DUO_DB_HOST: postgres
      DUO_DB_PORT: 5432
      DUO_DB_USER: postgres
      DUO_DB_PASS: password

      DUO_CORS_ORIGINS: '*'

      DUO_R2_BUCKET_NAME: s3-mock-bucket
      DUO_R2_ACCT_ID: unused-in-dev-env
      DUO_R2_ACCESS_KEY_ID: s3-mock-access-key-id
      DUO_R2_ACCESS_KEY_SECRET: s3-mock-secret-access-key-secret

      DUO_BOTO_ENDPOINT_URL: http://s3mock:9090
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  chat:
    build:
      context: .
      dockerfile: chat.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5442:5442"
      - "5443:5443"
    volumes:
      - ./service/chat/__init__.py:/app/service/chat/__init__.py:ro
      - ./service/chat/container/mongooseim.toml:/mongooseim.template.toml:ro
      - ./service/chat/container/init.sql:/init.sql:ro
      - ./service/chat/container/init-db.sh:/init-db.sh:ro
    environment:
      DUO_API_HOST: http://api:5000
      DUO_DB_HOST: postgres
      DUO_DB_PORT: 5432
      DUO_DB_USER: postgres
      DUO_DB_PASS: password
    healthcheck:
      test: ["CMD", "bash", "-c", "[[ -e /db-initialized ]]"]
      interval: 30s
      timeout: 10s
      retries: 3

  cron:
    build:
      context: .
      dockerfile: cron.Dockerfile
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
      chat:
        condition: service_healthy
      api:
        condition: service_healthy
    volumes:
      - .:/app
    environment:
      DUO_SMTP_HOST: smtp
      DUO_SMTP_PORT: 1025
      DUO_SMTP_USER: unused-in-dev-env
      DUO_SMTP_PASS: unused-in-dev-env

      DUO_DB_HOST: postgres
      DUO_DB_PORT: 5432
      DUO_DB_USER: postgres
      DUO_DB_PASS: password
      DUO_DB_CHAT_NAME: duo_chat
      DUO_DB_API_NAME: duo_api

      DUO_R2_BUCKET_NAME: s3-mock-bucket
      DUO_R2_ACCT_ID: unused-in-dev-env
      DUO_R2_ACCESS_KEY_ID: s3-mock-access-key-id
      DUO_R2_ACCESS_KEY_SECRET: s3-mock-secret-access-key-secret

      DUO_BOTO_ENDPOINT_URL: http://s3mock:9090

      DUO_CRON_EMAIL_POLL_SECONDS: '1'

      DUO_CRON_AUTODEACTIVATE2_DRY_RUN: 'false'
      DUO_CRON_AUTODEACTIVATE2_POLL_SECONDS: '1'

      DUO_CRON_INSERT_LAST_POLL_SECONDS: '1'

      DUO_CRON_PHOTO_CLEANER_DRY_RUN: ${DUO_CRON_PHOTO_CLEANER_DRY_RUN:-false}
      DUO_CRON_PHOTO_CLEANER_POLL_SECONDS: '1'

      DUO_CRON_EXPIRED_RECORDS_POLL_SECONDS: '1'

  s3mock:
    image: adobe/s3mock

    environment:
      initialBuckets: s3-mock-bucket
      AWS_ACCESS_KEY_ID: s3-mock-access-key-id
      AWS_SECRET_ACCESS_KEY: s3-mock-secret-access-key-secret

    ports:
      - 9090:9090

  smtp:
    image: mailhog/mailhog

    ports:
      - "1025:1025"
      - "8025:8025"

networks:
  default:
    driver: bridge
